// --------------------------------------------------------------------------
// Simulation.java
// Matthew Tan
// mxtan
// CMPS 12B/M
// pa4
// --------------------------------------------------------------------------

import java.io.*;
import java.util.*;

public class Simulation
{
    public static Job getJob(Scanner inScanner) 
    {
        String[] s = inScanner.nextLine().split(" ");
        // System.out.println("s is: " + s);
        // System.out.println("s[0] is: " + s[0]);
        int a = Integer.parseInt(s[0]);
        // System.out.println("a is: " + a);
        int d = Integer.parseInt(s[1]);
        // System.out.println("s[1] is: " + s[1]);
        // System.out.println("d is: " + d);
        return new Job(a, d);
    }

    public static void main(String[] args) throws IOException
    {
        Scanner inScanner = null;
        PrintWriter trace = null;
        PrintWriter report = null;
        int n = 1;
        int m;
        Queue storage = new Queue();
        Queue backup = new Queue();

        if (args.length < 1)
        {
            System.out.println("Usage Simulation <input> ");
            System.exit(1);
        }
        
        inScanner = new Scanner(new File(args[0]));
        m = inScanner.nextInt();
        System.out.print(m + " Jobs: ");

        String getLines = inScanner.nextLine();
        // System.out.println("getLines is: " + getLines);
        while (inScanner.hasNext())
        {
            Job newJob = getJob(inScanner);
            // System.out.println("From file, job: " + newJob);
            backup.enqueue(newJob);
        }
        System.out.println();
        
        int unfinishedJobs = m;
        int time = 0;
        int waitTime;
        int maximumWaitTime;
        int averageWaitTime;
        int finishTime = 0;
        
        System.out.print("0: " + backup);
        System.out.println();

        System.out.println("****************************");
        if (n == 1)

        {
            System.out.println(n + " processor:"); 
        }
        else
        {
            System.out.println(n + " processors:");
        }
        System.out.println("****************************");

        System.out.println("time=" + time);
        int count = 15;
        int prevFinishTime = 0;
        while (unfinishedJobs != 0 && count > 0)
        {
            System.out.println("current time is: " + time);
            if (time == 0)
            {
                System.out.println("0: " + backup);
                System.out.println("1: " + storage);
            }

            /*
            if (!storage.isEmpty())
            {
                Job temp = (Job) storage.peek();

                System.out.println("time: " + time + " temp.getArrival: " 
                        + temp.getArrival() 
                        + " temp.getDuration: " + temp.getDuration());

                if (time >= temp.getArrival() + temp.getDuration())
                {
                    System.out.println("calling computeFinishTime: ");
                    temp.computeFinishTime(time);
                }
                System.out.println("In after compute time: 0: " + backup);
                System.out.println("In after compute time: 1: " + storage);

            }
            */

            if (!backup.isEmpty())
            {
                if (!storage.isEmpty())
                {
                    Job temp2 = (Job) storage.peek();
                    if ()
                    {
                        prevFinishTime += temp2.getDuration();
                        temp2.computeFinishTime(prevFinishTime);
                        System.out.println("In prevFinishTime: 0: " + backup);
                        System.out.println("In prevFinishTime: 1: " + storage);

                    }
                    if (prevFinishTime == 0 ||
                        time >= temp2.getArrival() + temp2.getDuration()) 
                    {
                    Job item = (Job) backup.dequeue();
                    storage.enqueue(item);
                    System.out.println("In getArrival: 0: " + backup);
                    System.out.println("In getArrival: 1: " + storage);

                        Job finished = (Job) storage.dequeue();
                        System.out.println("before calling computeFinishTime: time: " 
                                   + time);
                        System.out.println("prevFinishTime: " + prevFinishTime 
                                   + " finished.getDuration: " + finished.getDuration());
                        if (prevFinishTime == 0)
                        {
                            prevFinishTime += finished.getDuration();
                        }
                        finished.computeFinishTime(prevFinishTime);
                        prevFinishTime = finished.getFinish();
                        System.out.println("In getFinish: 0: " + backup);
                        backup.enqueue(finished);
                        System.out.println("In getFinish: 1: " + storage);
                        waitTime = finished.getWaitTime();
                        System.out.println("wait time is: " + waitTime);
                        unfinishedJobs--;
                    }
                }
            }
            
            time++;
            System.out.println("time now is: " + time);
            count--;
        }

        /*
        while (n < m - 1)
        {
            int i = 0;
            Queue[] P = new Queue[n + 1];
            for (i = 0; i <= n; i++)
            {
               P[i] = new Queue();
            }
       
            n++;
        }
        */
        
        inScanner.close();
        // trace.close();
        // report.close();
    }
}

